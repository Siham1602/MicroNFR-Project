Index: nfr-admin-serive/src/main/java/dz/esisba/adminservice/config/Security/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dz.esisba.adminservice.config.Security;\r\n\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\r\n\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n    @Override    public void configure(HttpSecurity http) throws Exception {\r\n        http\r\n                .authorizeRequests()\r\n                .antMatchers(\"/api/**\").authenticated()\r\n                .anyRequest().permitAll()\r\n                .and()\r\n                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nfr-admin-serive/src/main/java/dz/esisba/adminservice/config/Security/SecurityConfig.java b/nfr-admin-serive/src/main/java/dz/esisba/adminservice/config/Security/SecurityConfig.java
--- a/nfr-admin-serive/src/main/java/dz/esisba/adminservice/config/Security/SecurityConfig.java	
+++ b/nfr-admin-serive/src/main/java/dz/esisba/adminservice/config/Security/SecurityConfig.java	
@@ -1,19 +1,45 @@
 package dz.esisba.adminservice.config.Security;
 
+
+import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;
+import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
+import org.springframework.security.web.SecurityFilterChain;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
+import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
+import org.springframework.security.web.SecurityFilterChain;
+
 
 @Configuration
-@EnableGlobalMethodSecurity(prePostEnabled = true)
-public class SecurityConfig extends WebSecurityConfigurerAdapter {
-    @Override    public void configure(HttpSecurity http) throws Exception {
+@EnableGlobalMethodSecurity(prePostEnabled = true,
+        securedEnabled = true,
+        jsr250Enabled = true)
+
+public class SecurityConfig {
+    public JwtAuthenticationConverter jwtAuthenticationConverter;
+
+    @Bean
+    protected SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
         http
+                .cors().and() // Ajouter CORS configuration
                 .authorizeRequests()
                 .antMatchers("/api/**").authenticated()
                 .anyRequest().permitAll()
                 .and()
-                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);    }
+                .oauth2ResourceServer(oauth2ResourceServer ->
+                        oauth2ResourceServer.jwt(jwt ->
+                                jwt.jwtAuthenticationConverter(jwtAuthenticationConverter)
+                        )
+                );
+        return http.build();
+    }
+
 }
